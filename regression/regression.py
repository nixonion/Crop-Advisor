# -*- coding: utf-8 -*-
"""regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SvpjymO5tzNeJ7c5QrRIBoW_WsEpUPwr
"""

import matplotlib.pyplot as plt 
import numpy as np 
from sklearn import datasets, linear_model, metrics 
import pandas as pd
import datetime
from sklearn.externals import joblib

col_names = ['Sl no.','District Name','Market Name', 'Commodity',	'Variety', 'Grade','Min Price (Rs/Quintal)','Max Price (Rs/Quintal)','modalprice','pricedate']
report = ['PriceJowar.csv','PriceMaize.csv','PriceBajra.csv','PriceWheat.csv']
cropnames = ["Jowar", "Maize", "Bajra", "Wheat"]

for i in range(4):

  cost = pd.read_csv(report[i], header=None, names=col_names, skiprows=[0])
  feature_cols = ['modalprice']

  converted_date = []

  y = np.array(cost[feature_cols])
  for j in range(len(cost.pricedate)):
    
    new_date = datetime.datetime.strptime(cost.pricedate[j], "%d-%b-%y")
    converted_date.append(new_date.toordinal())

  X = np.array(converted_date)
  # splitting X and y into training and testing sets 
  from sklearn.model_selection import train_test_split 
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, 
                            random_state=1) 

  X_train= X_train.reshape(-1, 1)
  y_train= y_train.reshape(-1, 1)
  X_test= X_test.reshape(-1, 1)
  y_test= y_test.reshape(-1, 1)

  # create linear regression object 
  reg = linear_model.LinearRegression() 

  # train the model using the training sets 
  reg.fit(X_train, y_train) 

  # regression coefficients 
  print('Coefficients: \n', reg.coef_)

  # variance score: 1 means perfect prediction 
  print('Variance score: {}'.format(reg.score(X_test, y_test))) 

  # plot for residual error 

  ## setting plot style 
  #plt.style.use('fivethirtyeight') 

  ## plotting residual errors in training data 
  #plt.scatter(reg.predict(X_train), reg.predict(X_train) - y_train, 
        #color = "green", s = 10, label = 'Train data') 

  ## plotting residual errors in test data 
  #plt.scatter(reg.predict(X_test), reg.predict(X_test) - y_test, 
        #color = "blue", s = 10, label = 'Test data') 

  ## plotting line for zero residual error 
  #plt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2) 

  ## plotting legend 
  #plt.legend(loc = 'upper right') 

  ## plot title 
  #plt.title("Residual errors") 

  ## function to show plot 
  #plt.show() 
   
  joblib_file = 'regression_'+cropnames[i]+'.pkl'  
  joblib.dump(reg, joblib_file)

from datetime import datetime
cropnames = ["Jowar", "Maize", "Bajra", "Wheat"]

for i in range(4):
  cost = pd.read_csv("RegressionInput.csv", header=None, names=col_names, skiprows=[0])
  cost['pricedate'] = cost['pricedate'].astype('str')
  joblib_model = joblib.load('regression_'+cropnames[i]+'.pkl')
  predict_date = datetime.strptime(cost.pricedate[0], "%d-%b-%y")

  predict_date = predict_date.toordinal()
  predict_date = np.array(predict_date)
  predict_date = predict_date.reshape(-1,1)
#   print(predict_date)
  lol = joblib_model.predict(predict_date)
  print(lol)